

#ifndef ARC_ROLES_ROLES_H
#define ARC_ROLES_ROLES_H

#include "ros/ros.h"

namespace arc_roles{
  class Role{
  private:
    float priority = -1.0;
    int max_count = -1;
    int curr_count = 0;
    
    std::struct role_matrix{
	  float compute=0;
	  float memory=0;
	  float locomotion=0;
	  float size=0;
	  float victim_sensor_basic=0;
	  float victim_sensor_full=0;
	  float victim_tracker=0;
	  float robot_sensor=0;
	  float sonar_count=0;
	  float sonar_range=0;
	  float laser_count=0;
	  float frontier_finder=0;
	  float task_assign=0;
	  float planner=0;
	  float value=0;
	  float expendability=0;
	  float marker=0;
	  float marker_sensor=0;
    }matrix;
    	ros::NodeHandle global_handle;
	ros::NodeHandle local_handle;

	ros::ServiceServer declare_role;

	ros::ServiceServer querry_role;

	void declare_role();
	void querry_role();
  public:
	
	Role();
	
	void run();

	bool declare_role_cb(std_srvs::SetBoolRequest &req, std_srvs::SetBoolResponse &res);
	bool querry_role_cb(arc_msgs::QuerryRole::Request &req, arc_msgs::QuerryRole::Responce &res);

	void set_priority(float new_priority);

	void set_max_count(int new_max_count);
    
  };
}


#endif //ARC_ROLES_ROLES_H
